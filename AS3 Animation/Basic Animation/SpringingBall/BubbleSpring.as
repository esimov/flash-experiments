package {	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.Sprite;	import flash.geom.Rectangle;		public class BubbleSpring extends Sprite {		private var ball1:Ball1;		private var ball2:Ball1;		private var ball3:Ball1;		protected var ball1select:Boolean = false;		protected var ball2select:Boolean = false;		protected var ball3select:Boolean = false;		private var springL:Number = 110;		private var spring:Number = 0.2;		private var friction:Number = 0.9;				public function BubbleSpring():void {			init();		}		private function init():void {			ball1 = new Ball1(20);			ball1.x = Math.random() * stage.stageWidth;			ball1.y = Math.random() * stage.stageHeight;			addChild(ball1);			ball1.addEventListener(MouseEvent.MOUSE_DOWN, onMousePressed);						ball2 = new Ball1(20);			ball2.x = Math.random() * stage.stageWidth;			ball2.y = Math.random() * stage.stageHeight;			addChild(ball2);			ball2.addEventListener(MouseEvent.MOUSE_DOWN, onMousePressed);						ball3 = new Ball1(20);			ball3.x = Math.random() * stage.stageWidth;			ball3.y = Math.random() * stage.stageHeight;			addChild(ball3);			ball3.addEventListener(MouseEvent.MOUSE_DOWN, onMousePressed);						addEventListener(Event.ENTER_FRAME, onStart);			addEventListener(MouseEvent.MOUSE_UP, onMouseReleased);					}				private function SpringTo(ballA:Ball1, ballB:Ball1):void {			var dx:Number = ballB.x - ballA.x;			var dy:Number = ballB.y - ballA.y;			var angle:Number = Math.atan2(dy,dx);			var targetX:Number = ballB.x - Math.cos(angle) * springL;			var targetY:Number = ballB.y - Math.sin(angle) * springL;			ballA.vx += (targetX - ballA.x) * spring;			ballA.vy += (targetY - ballA.y) * spring;			ballA.vx *= friction;			ballA.vy *= friction;			ballA.x += ballA.vx;			ballA.y += ballA.vy;			if (ballA.x <0 || ballA.y<0) {				ballA.vx *= -1;			}		}				private function onStart(evt:Event):void {			if (!ball1select) {				SpringTo(ball1, ball2);				SpringTo(ball1, ball3);			}						if (!ball2select) {				SpringTo(ball2, ball1);				SpringTo(ball2, ball3);			}						if (!ball3select) {				SpringTo(ball3, ball1);				SpringTo(ball3, ball2);			}						graphics.clear();			graphics.lineStyle(1);			graphics.moveTo(ball1.x, ball1.y);			graphics.lineTo(ball2.x, ball2.y);			graphics.lineTo(ball3.x, ball3.y);			graphics.lineTo(ball1.x, ball1.y);		}				private function onMousePressed(evt:MouseEvent):void {			evt.target.startDrag();			if (evt.target == ball1) {				ball1select = true;			}			else if (evt.target == ball2) {				ball2select = true;			}			else if (evt.target == ball3) {				ball3select = true;			}		}				private function onMouseReleased (evt:MouseEvent):void {			ball1.stopDrag();			ball1select = false;			ball2.stopDrag();			ball2select = false;			ball3.stopDrag();			ball3select = false;		}											}}