package {	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import fl.motion.easing.Back;	import flash.geom.ColorTransform;	import flash.geom.Transform;		[SWF (backgroundColor = 0xffffff, width = 800, height = 600)]		public class Cube3D extends Sprite	{		private var points:Array;		private var triangles:Array;		private var fl:Number = 250;		private var color1:uint = 0xcdcb19;		private var color2:uint = 0xcd85ad;		private var color3:uint = 0xcdde58;		private var color4:uint = 0xd69a38;				private var vpX:Number = stage.stageWidth / 2;		private var vpY:Number = stage.stageHeight / 2;				public function Cube3D()		{			init();		}				private function init():void		{			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;						points = new Array();			//BACK			points[0] =  new Point3D(-100, -100, -100);			points[1] =  new Point3D( 100, -100, -100);			points[2] =  new Point3D( 100,  100, -100);			points[3] =  new Point3D(-100,  100, -100);						//FRONT 			points[4] =  new Point3D(-100, -100, 100);			points[5] =  new Point3D( 100, -100, 100);			points[6] =  new Point3D( 100,  100, 100);			points[7] =  new Point3D(-100,  100, 100);						for(var i:uint = 0; i < points.length; i++)			{				points[i].setVanishingPoint(vpX, vpY);				points[i].setCenter(0, 0, 100);			}						triangles = new Array();			triangles[0] = new Triangle3D(points[0], points[1], points[2], color1);			triangles[1] = new Triangle3D(points[0], points[2], points[3], color1);			triangles[2] = new Triangle3D(points[0], points[3], points[7], color2);			triangles[3] = new Triangle3D(points[0], points[7], points[4], color2);			triangles[4] = new Triangle3D(points[7], points[4], points[6], color3);			triangles[5] = new Triangle3D(points[4], points[5], points[6], color3);			triangles[6] = new Triangle3D(points[5], points[1], points[6], color4);			triangles[7] = new Triangle3D(points[1], points[2], points[6], color4);			triangles[8] = new Triangle3D(points[0], points[1], points[5], color1);			triangles[9] = new Triangle3D(points[0], points[5], points[4], color1);			triangles[10] = new Triangle3D(points[2], points[3], points[6], color2);			triangles[11] = new Triangle3D(points[6], points[3], points[7], color2);						addEventListener(Event.ENTER_FRAME, onEnterFrame);		}				private function onEnterFrame(event:Event):void		{			var angleX:Number = (mouseY - vpY) * .001;			var angleY:Number = (mouseX - vpX) * .001;			for(var i:uint = 0; i < points.length; i++)			{				var point:Point3D = points[i];				point.rotateX(angleX);				point.rotateY(angleY);			}						graphics.clear();			for (i = 0; i< triangles.length; i++) {				triangles[i].drawPoint(graphics);			}		}	}}