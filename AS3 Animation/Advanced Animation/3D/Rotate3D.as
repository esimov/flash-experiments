package {	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import fl.motion.easing.Back;	import flash.geom.ColorTransform;	import flash.geom.Transform;		[SWF (width = 800, height = 600)]		public class Rotate3D extends Sprite {		private var balls:Array;		private var ball:Ball3D;		private var numBalls:uint = 100;		private var vpX:Number = stage.stageWidth/2;		private var vpY:Number = stage.stageHeight/2;		private var focalLenght:Number = 250;				public function Rotate3D():void {			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			init();		}				private function init():void {								balls = new Array();			for (var i:uint = 0; i< numBalls; i++) {				var colorTrans:ColorTransform = new ColorTransform();				var color:uint = Math.random() * 0xffffff;				colorTrans.color = color;				var ball:Ball3D = new Ball3D(20);				//ball.transform.colorTransform = colorTrans;				balls.push(ball);				ball.xPos = Math.random() * 300 - 200;				ball.yPos = Math.random() * 300 - 200;				ball.zPos = Math.random() * 300 - 200;				addChild(ball);			}			stage.addEventListener(Event.ENTER_FRAME, onStartEvent);		}				private function onStartEvent(evt:Event):void {			var angleY:Number = (mouseX - vpX) * 0.0003;			var angleX:Number = (mouseY - vpY) * 0.0003;						for (var i:uint = 0; i< balls.length; i++) {				var ball:Ball3D = balls[i] as Ball3D;				rotateY (ball, angleY);				rotateX (ball, angleX);				perspectiveProj(ball);			}						zSort();		}				private function rotateX (ball:Ball3D, angleX:Number):void {			var cosX:Number = Math.cos(angleX);			var sinX:Number = Math.sin(angleX);						var y1:Number = cosX * ball.yPos - sinX * ball.zPos;			var z1:Number = cosX * ball.zPos + sinX * ball.yPos;						ball.yPos = y1;			ball.zPos = z1;				}				private function rotateY(ball:Ball3D, angleY:Number):void {			var cosY:Number = Math.cos(angleY);			var sinY:Number = Math.sin(angleY);						var x1:Number = cosY * ball.xPos - sinY * ball.zPos;			var z1:Number = cosY * ball.zPos + sinY * ball.xPos;						ball.zPos = z1;			ball.xPos = x1;					}					private function perspectiveProj(ball:Ball3D):void {						if (ball.zPos > - focalLenght) {				var scale:Number = focalLenght / (focalLenght + ball.zPos);				ball.scaleX = ball.scaleY = scale;				ball.x = vpX + ball.xPos * scale;				ball.y = vpY + ball.yPos * scale;				ball.visible = true;			}			else			{				ball.visible = false;			}		}				private function zSort():void {						balls.sortOn("zPos", Array.DESCENDING | Array.NUMERIC);			for (var i:uint = 0; i< numBalls; i++) {				var ball:Ball3D = balls[i];				setChildIndex(ball, i);			}		}	}}