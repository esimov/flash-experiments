package {	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import fl.transitions.Rotate;		[SWF (backgroundColor = 0x000000, width = 800, height = 600, frameRate = 60)]		public class FlyingTrees extends Sprite {		private var floor:Number = 50;		private var friction:Number = 0.9;		private var gravity:Number = 0.3;		private var easing:Number = 0.1;		private var vpX:Number = stage.stageWidth/2;		private var vpY:Number = stage.stageHeight/2;		private var vx:Number = 0;		private var vy:Number = 0;		private var vz:Number = 0;		private var ax:Number = 0;		private var ay:Number = 0;		private var az:Number = 0;		private var rot:Number = 0;		private var numTrees:Number = 300;		private var fl:Number = 250;		private var trees:Array;		private var mc:Sprite = new Sprite();				public function FlyingTrees():void {			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			init();		}				private function init():void {			trees = new Array();			for (var i:uint = 0; i< numTrees; i++) {				var tree:Tree = new Tree();				trees.push(tree);				tree.xpos = Math.random() * 2000 - 1000;				tree.ypos = floor;				tree.zpos = Math.random() * 10000;				mc.addChild(tree);				addChild(mc);			}			addEventListener(Event.ENTER_FRAME, onStartEvent);			stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyPress);			stage.addEventListener(KeyboardEvent.KEY_UP, onKeyRelease);		}				private function onStartEvent(evt:Event):void {			vx += ax;			vy += ay;			vz += az;						for (var i:uint = 0; i< trees.length; i++) {				var tree:Tree = Tree(trees[i]);				moveTree(tree);			}			vx *= friction;			vy *= friction;			vz *= friction;			vy -= gravity;		}				private function moveTree(tree:Tree):void {			tree.xpos += vx;			tree.ypos += vy;			tree.zpos += vz;			if (tree.zpos < - fl) {				tree.zpos += 10000;			}						if (tree.zpos > 10000 - fl) {				tree.zpos -= 10000;			}						if (tree.ypos < floor) {				tree.ypos = floor;			}						var scale:Number = fl / (fl + tree.zpos);			tree.scaleX = tree.scaleY = scale;			tree.x = vpX + tree.xpos * scale;			tree.y = vpY + tree.ypos * scale;			tree.alpha = scale;		}				private function onKeyPress(evt:KeyboardEvent):void {			var r:Rotate			switch (evt.keyCode) {				case Keyboard.DOWN:				az += 0.5;				break;								case Keyboard.UP:				az -= 0.5;				break;								case Keyboard.LEFT:				ax +=1;				break;								case Keyboard.RIGHT:				ax -= 1;				break;				default:				break;			}		}				private function onKeyRelease(evt:KeyboardEvent):void {			switch (evt.keyCode) {				case Keyboard.DOWN:				case Keyboard.UP:				az = 0;				break;								case Keyboard.LEFT:				case Keyboard.RIGHT:				ax = 0;				break;								default:				break;			}		}	}}