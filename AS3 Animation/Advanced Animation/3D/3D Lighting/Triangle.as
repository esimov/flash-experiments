package {	import flash.display.Sprite;	import flash.display.Graphics;		public class Triangle extends Sprite {		private var pointA:Point3D;		private var pointB:Point3D;		private var pointC:Point3D;		private var color:uint;		public var light:Light;				public function Triangle (pointA:Point3D, pointB:Point3D, pointC:Point3D, color:uint):void {			this.pointA = pointA;			this.pointB = pointB;			this.pointC = pointC;			this.color = color;		}				public function drawPoint(g:Graphics):void{			if (backFace()) {				return;			}			g.beginFill(getAdjustedColor());			g.moveTo(pointA.screenX, pointA.screenY);			g.lineTo(pointB.screenX, pointB.screenY);			g.lineTo(pointC.screenX, pointC.screenY);			g.lineTo(pointA.screenX, pointA.screenY);			g.endFill();		}				private function backFace():Boolean {			var cax:Number = pointC.screenX - pointA.screenX;			var cay:Number = pointC.screenY - pointA.screenY;			var bcx:Number = pointB.screenX - pointC.screenX;			var bcy:Number = pointB.screenY - pointC.screenY;						return cax * bcy > cay * bcx;		}				public function get depth():Number {			var zPos:Number = Math.min(pointA.zpos, pointB.zpos);			zPos = Math.min(zPos, pointC.zpos);			return zPos;		}				private function getAdjustedColor():uint {			var red:Number = color >> 16;			var green:Number = color >> 8 & 0xFF;			var blue:Number = color & 0xFF;						var lightFactor:Number = getLightFactor();						red   *= lightFactor;			green *= lightFactor;			blue  *= lightFactor;						return red << 16 | green << 8 | blue;		}				private function getLightFactor():Number {			var ab:Object = new Object();			ab.x = pointA.xpos - pointB.xpos;			ab.y = pointA.ypos - pointB.ypos;			ab.z = pointA.zpos - pointB.zpos;						var bc:Object = new Object();			bc.x = pointB.xpos - pointC.xpos;			bc.y = pointB.ypos - pointC.ypos;			bc.z = pointB.zpos - pointC.zpos;						var normal:Object = new Object();			normal.x = (ab.y * bc.z) - (ab.z * bc.y);			normal.y = -((ab.x * bc.z) - (ab.z * bc.x));			normal.z = (ab.x * bc.y) - (ab.y * bc.x);						var dotProd:Number = normal.x * light.x + normal.y * light.y + normal.z * light.z;			var normMag:Number = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);			var lightMag:Number = Math.sqrt(light.x * light.x + light.y * light.y + light.z * light.z);						return (Math.acos(dotProd / (normMag * lightMag)) / Math.PI) * light.brightness;		}	}}