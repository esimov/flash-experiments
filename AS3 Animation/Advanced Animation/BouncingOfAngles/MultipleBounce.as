package {	import flash.events.Event;	import flash.display.Sprite;	import flash.geom.Rectangle;	import flash.display.StageScaleMode;	import flash.display.StageAlign;		public class MultipleBounce extends Sprite {		private var ball:Ball;		private var bounce:Number = -0.5;		private var gravity:Number = 0.3;		private var friction:Number = 0.2;		private var line:Sprite;		private var numLines:Number = 5;		private var lines:Array;				public function MultipleBounce():void {			init();		}				private function init():void {			ball = new Ball(20);			lines = new Array();			ball.x = stage.stageWidth/2 + 50;			ball.y = 20;			addChild(ball);			for (var i:Number = 0; i < numLines; i++) {				line = new Sprite();				line.graphics.lineStyle(1);				line.graphics.lineTo(70,0);				lines.push(line);				addChild(line);			}						lines[0].x = 150;			lines[0].y = 100;			lines[0].rotation = 30;						lines[1].x = 300;			lines[1].y = 100;			lines[1].rotation = -25;						lines[2].x = 150;			lines[2].y = 200;			lines[2].rotation = 32;						lines[3].x = 300;			lines[3].y = 200;			lines[3].rotation = - 27;						lines[4].x = 235;			lines[4].y = 300;			lines[4].rotation = 15;				addEventListener(Event.ENTER_FRAME, onStart);		}				private function onStart(evt:Event):void {			ball.x += ball.vx;			ball.y += ball.vy;			ball.vy += gravity;			checkBounds();						for (var i:Number = 0; i<lines.length; i++) {				if (checkLines(lines[i])) {					break;				}			}		}				private function checkLines(line:Sprite):void {			var bounds:Rectangle = line.getBounds(this);						if (ball.x > bounds.left && ball.x < bounds.right) {				var angle:Number = Math.PI * line.rotation / 180;				var cos:Number = Math.cos(angle);				var sin:Number = Math.sin(angle);				var distX:Number = ball.x - line.x;				var distY:Number = ball.y - line.y;								//rotate coordinate				var x1:Number = cos * distX + sin * distY;				var y1:Number = cos * distY - sin * distX;								//rotate velocity				var vy1:Number = cos * ball.vy - sin * ball.vx;							if (y1 > - ball.radius && y1 < vy1) {					var vx1:Number = cos * ball.vx + sin * ball.vy;					y1 = - ball.radius;					vy1 *= bounce;										//rotate coordinate & velocity back					distX = cos * x1 - sin * y1;					distY = cos * y1 + sin * x1;										ball.vx = cos * vx1 - sin * vy1;					ball.vy = cos * vy1 - sin * vx1;										ball.x = line.x + distX;					ball.y = line.y + distY;				}			}		}				private function checkBounds():void {			if (ball.x - ball.radius < 0) {				ball.x = ball.radius;				ball.vx *= bounce;				ball.vx *= friction;			}						if (ball.x + ball.radius > stage.stageWidth) {				ball.x = stage.stageWidth - ball.radius;				ball.vx *= bounce;				ball.vx *= friction;			}						if (ball.y - ball.radius < 0) {				ball.y = ball.radius;				ball.vy *= bounce;			}						if (ball.y + ball.radius > stage.stageHeight) {				ball.y = stage.stageHeight - ball.radius;				ball.vy *= bounce;			}		}	}}