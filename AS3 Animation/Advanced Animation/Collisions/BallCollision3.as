package {		import flash.events.Event;	import flash.display.Sprite;	import flash.geom.Rectangle;	import flash.display.StageAlign;	import flash.display.StageScaleMode;		public class BallCollision3 extends Sprite {		private var ball:Ball;		private var bounce:Number = -1;		private var friction:Number = 0.8;		private var numBalls = 8;		private var balls:Array;						public function BallCollision3():void {			init();		}				private function init():void {			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;						balls = new Array();			for (var i:Number = 0; i< numBalls; i++) {				ball = new Ball(Math.random() * 50 + 40);				ball.x = Math.random() * stage.stageWidth;				ball.y = Math.random() * stage.stageHeight;				ball.vx = Math.random() * 15 - 5;				ball.vy = Math.random() * 15 - 5;				ball.mass = Math.random() * 2 + 3;				addChild(ball);				balls.push(ball);			}						addEventListener(Event.ENTER_FRAME, onStart);		}				private function onStart(evt:Event):void {			for (var i:Number = 0; i< balls.length; i++) {				var ball:Ball = balls[i] as Ball;				ball.x += ball.vx;				ball.y += ball.vy;				checkBounds(ball);			}						for (i = 0; i< balls.length-1; i++) {				var ballA:Ball = balls[i] as Ball;				for (var j:Number = i+1; j< balls.length; j++) {					var ballB:Ball = Ball(balls[j]);					checkCollision(ballA, ballB);				}			}		}				function checkCollision (ball0:Ball, ball1:Ball):void {			var dx:Number = ball1.x - ball0.x;			var dy:Number = ball1.y - ball0.y;			var dist:Number = Math.sqrt(dx*dx + dy*dy);						if (dist < ball0.radius + ball1.radius) {				var angle:Number = Math.atan2(dy, dx);				var cos:Number = Math.cos(angle);				var sin:Number = Math.sin(angle);								var x0:Number = 0;				var y0:Number = 0;				var x1:Number = dx * cos + dy * sin;				var y1:Number = dy * cos - dx * sin;								var vx0:Number = ball0.vx * cos + ball0.vy * sin;				var vy0:Number = ball0.vy * cos - ball0.vx * sin;				var vx1:Number = ball1.vx * cos + ball1.vy * sin;				var vy1:Number = ball1.vy * cos - ball1.vx * sin;											var vxTotal:Number = vx0 - vx1;				var absV:Number = Math.abs(vx0) + Math.abs(vx1);				var overlap:Number = (ball0.radius + ball1.radius) - Math.abs(x0 - x1);				vx0 = ((ball0.mass - ball1.mass) * vx0 + 2 * ball1.mass * vx1) / (ball1.mass + ball0.mass);				vx1 = vxTotal + vx0;												x0 += vx0/absV * overlap;				x1 += vx1/absV * overlap;								var x0Final:Number = x0 * cos - y0 * sin;				var y0Final:Number = y0 * cos + x0 * sin;				var x1Final:Number = x1 * cos - y1 * sin;				var y1Final:Number = y1 * cos + x1 * sin;								ball0.x = ball0.x + x0Final;				ball0.y = ball0.y + y0Final;				ball1.x = ball0.x + x1Final;				ball1.y = ball0.y + y1Final;									ball0.vx = vx0 * cos - vy0 * sin;				ball0.vy = vy0 * cos + vx0 * sin;				ball1.vx = vx1 * cos - vy1 * sin;				ball1.vy = vy1 * cos + vx1 * sin;							}		}				function checkBounds(ball:Ball):void {			if (ball.x < ball.radius) {				ball.x = ball.radius;				ball.vx *= bounce;			}						if (ball.x > stage.stageWidth - ball.radius) {				ball.x = stage.stageWidth - ball.radius;				ball.vx *= bounce;			}						if (ball.y < ball.radius) {				ball.y = ball.radius;				ball.vy *= bounce;			}						if (ball.y > stage.stageHeight - ball.radius) {				ball.y = stage.stageHeight - ball.radius;				ball.vy *= bounce;			}		}	}}