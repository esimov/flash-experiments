/* Credits goes to Inigo Quilez
 * http://www.iquilezles.org/apps/shadertoy/
*/

<languageVersion : 1.0;>

kernel Monjori
<   namespace : "Simo Endre";
    vendor : "simoendre.wordpress.com";
    version : 1;
    description : "Pixelbender adapted version of Mic's 1k demo.release";
>

{
    parameter float time
    <
        minValue:     float(0.0);
        maxValue:     float(10000.0);
        defaultValue: float(0.0);
        description:  "adjust time";
    >;      
    
    parameter float2 resolution
    <
        minValue:     float2(100.0, 100.0);
        maxValue:     float2(1024.0, 768.0);
        defaultValue: float2(800.0, 600.0);
        description:  "define the screen resolution";
    >;  
    
    parameter float3 color
    <
        minValue:     float3(0.1, 0.1, 0.1);
        maxValue:     float3(20.0, 20.0, 20.0);
        defaultValue: float3(1.3, 8.0, 14.0);
        description:  "adjust 1st color";
    >;
    
    
    input image4 src;
    output pixel3 dst; 
    
    void evaluatePixel()
    {
        float2 p = -1.0 + 2.0 * outCoord().xy / resolution.xy;
        float a = time*20.0;
        float d,e,f,g=1.0/40.0,h,i,r,q;
        e=400.0*(p.x*0.5+0.5);
        f=400.0*(p.y*0.5+0.5);
        i=160.0+sin(e*g+a/150.0)*20.0;
        d=160.0+cos(f*g/2.0)*18.0+cos(e*g)*7.0;
        r=sqrt(pow(i-e,2.0)+pow(d-f,2.0));
        q=f/r;
        e=(r*cos(q))-a/2.0;f=(r*sin(q))-a/2.0;
        d=sin(e*g)*176.0+sin(e*g)*164.0+r;
        h=((f+d)+a/2.0)*g;
        i=cos(h+r*p.x/1.3)*(e+e+a)+cos(q*g*18.0)*(r+h/3.0);
        h=sin(f*g)*44.0-sin(e*g)*212.0*p.x;
        h=(h+(f-e)*q+sin(r-(a+h)/7.0)*10.0+i/4.0)*g;
        i+=cos(h*2.3*sin(a/350.0-q))*184.0*sin(q-(r*4.3+a/12.0)*g)+tan(r*g+h)*184.0*cos(r*g+h);
        i=mod(i/5.6,256.0)/64.0;
        if(i<0.0) i+=4.0;
        if(i>=2.0) i=4.0-i;
        d=r/250.0;
        d+=sin(d*d*8.0)*0.52;
        f=(sin(a*g)+1.0)/2.0;
        
        float3 col = float3(f*i/color.r,i/5.0+d/8.0,i)*d*p.x+float3(i/color.r+d/color.g,i/0.8+d/color.b,i)*d*(2.4-p.x);
        
        dst.rgb = float3(col.r, col.b, col.g);

    }
}
