<languageVersion : 1.0;>

kernel NewFilter
< namespace : "Tunnel";
vendor : "Mr.doob";
version : 1;
description : "Tunnel effect";
>
{
input image4 src;
output pixel4 dst;

parameter float2 imgSize
<
defaultValue : float2(512.0, 512.0);
minValue : float2(0.0,0.0);
maxValue : float2(512.0,512.0);
>;

parameter float2 center
<
defaultValue : float2(256.0, 256.0);
minValue : float2(0.0,0.0);
maxValue : float2(512.0,512.0);
>;

parameter float time
<
minValue : float(0.0);
maxValue : float(512.0);
>;

parameter float2 offset;

void evaluatePixel()
{
float2 pos = (outCoord() - center) / imgSize;

float pi = 3.141592653589793;
float r = sqrt(pow(pos.x,2.0)+pow(pos.y,2.0));
float a = atan(pos.y,pos.x)+0.5*sin(0.5*r-0.5*time);

float u = 0.0;
float v = 0.0;

float s = 0.5 + 0.5*cos(7.0*a);
    s = smoothStep(0.0,1.0,s);
    s = smoothStep(0.0,1.0,s);
    s = smoothStep(0.0,1.0,s);
    s = smoothStep(0.0,1.0,s);

    u = time + 1.0/( r + .2*s);
    v = 3.0*a/3.1416;

    float w = (0.5 + 0.5*s)*r*r;
    
u += offset.x;
v += offset.y;

float ao = 0.5 + 0.5*cos(7.0*a);
    ao = smoothStep(0.0,0.4,ao)-smoothStep(0.4,0.7,ao);
    ao = 1.0-0.5*ao*r;

float4 col = sampleNearest(src,float2(u, v));
u *= imgSize.x;
v *= imgSize.y;

if (u < 0.0) u += imgSize.x * ceil(-u / imgSize.x);
if (v < 0.0) v += imgSize.y * ceil(-v / imgSize.y);
if (u > imgSize.x) u -= imgSize.x * floor(u / imgSize.x);
if (v > imgSize.y) v -= imgSize.y * floor(v / imgSize.y);

dst.rgba = pixel4(col*w*ao);
}
}
