/** * Copyright esimov * MIT License ( http://www.opensource.org/licenses/mit-license.php ) */package{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.BlendMode;	import flash.display.Graphics;	import flash.display.Shape;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.filters.BevelFilter;	import flash.filters.DropShadowFilter;	import flash.filters.GlowFilter;	import flash.geom.ColorTransform;	import flash.geom.Point;	import flash.geom.Rectangle;		import net.hires.debug.Stats;
	[SWF (backgroundColor = 0x00, width = 800, height = 800)]		public class ColorWheel extends Sprite	{		//PRIVATE CONSTANTS		private static const COLOR_NUM:Number = 24;		private static const BULLET_COUNT:Number = COLOR_NUM;		private const WIDTH:Number = stage.stageWidth;		private const HEIGHT:Number = stage.stageHeight;				//PRIVATE VECTOR VAARIABLES		private var _smallBullets:Vector.<uint> = new Vector.<uint>(COLOR_NUM);		private var _bigBullets:Vector.<uint> = new Vector.<uint>(COLOR_NUM);		private var _particlesPool:Vector.<Particle> = new Vector.<Particle>();		private var _bulletImg:Vector.<BitmapData> = new Vector.<BitmapData>(COLOR_NUM);		private var _particles:Array;		private var _particle:Particle;				//PRIVATE VARIABLES		private var _colorIndex:Number = 0;		private var _bmp:BitmapData = new BitmapData(WIDTH, HEIGHT, true, 0x00);		private var _stage:Bitmap;		private var _radian:Number = 0;				public function ColorWheel():void		{			if (stage) addEventListener(Event.ADDED_TO_STAGE, init)			else removeEventListener(Event.ADDED_TO_STAGE, init);			}				private function init(e:Event):void		{			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stage.frameRate = 60;						addChild(_stage = new Bitmap(_bmp));							_particle = new Particle();			_particles = [];			var i:Number = 0;			_bigBullets[i] = 0xFF0000;	_smallBullets[i] = 0x550000;	i++;			_bigBullets[i] = 0xFF0040;	_smallBullets[i] = 0x550015;	i++;			_bigBullets[i] = 0xFF007F;	_smallBullets[i] = 0x55002B;	i++;			_bigBullets[i] = 0xFF00C0;	_smallBullets[i] = 0x550040;	i++;			_bigBullets[i] = 0xFF00FF;	_smallBullets[i] = 0x550055;	i++;			_bigBullets[i] = 0xC000FF;	_smallBullets[i] = 0x400055;	i++;			_bigBullets[i] = 0x7F00FF;	_smallBullets[i] = 0x2B0055;	i++;			_bigBullets[i] = 0x4000FF;	_smallBullets[i] = 0x150055;	i++;			_bigBullets[i] = 0x0000FF;	_smallBullets[i] = 0x000055;	i++;			_bigBullets[i] = 0x0040FF;	_smallBullets[i] = 0x001555;	i++;			_bigBullets[i] = 0x007FFF;	_smallBullets[i] = 0x002B55;	i++;			_bigBullets[i] = 0x00C0FF;	_smallBullets[i] = 0x004055;	i++;			_bigBullets[i] = 0x00FFFF;	_smallBullets[i] = 0x005555;	i++;			_bigBullets[i] = 0x00FFC0;	_smallBullets[i] = 0x005540;	i++;			_bigBullets[i] = 0x00FF7F;	_smallBullets[i] = 0x00552B;	i++;			_bigBullets[i] = 0x00FF40;	_smallBullets[i] = 0x005515;	i++;			_bigBullets[i] = 0x00FF00;	_smallBullets[i] = 0x005500;	i++;			_bigBullets[i] = 0x40FF00;	_smallBullets[i] = 0x155500;	i++;			_bigBullets[i] = 0x7FFF00;	_smallBullets[i] = 0x2B5500;	i++;			_bigBullets[i] = 0xC0FF00;	_smallBullets[i] = 0x405500;	i++;			_bigBullets[i] = 0xFFFF00;	_smallBullets[i] = 0x555500;	i++;			_bigBullets[i] = 0xFFC000;	_smallBullets[i] = 0x554000;	i++;			_bigBullets[i] = 0xFF7F00;	_smallBullets[i] = 0x552B00;	i++;			_bigBullets[i] = 0xFF4000;	_smallBullets[i] = 0x551500;	i++;						var shape:Shape;			var g:Graphics;			for (var c:int = 0; c< COLOR_NUM; c++)			{				shape = new Shape();				g = shape.graphics;				g.beginFill(_bigBullets[c], 0.8);				g.drawCircle(8, 8, 8);				g.beginFill(_smallBullets[c], 1);				g.drawCircle(8, 8, 4);				g.endFill();								_bulletImg[c] = new BitmapData(shape.width, shape.height, true, 0xff);				_bulletImg[c].draw(shape);				_bulletImg[c].applyFilter(_bulletImg[c], _bulletImg[c].rect, new Point(), new BevelFilter(5, 45, _smallBullets[c], 1, _bigBullets[c], 0.78, 5, 5));			}						addChild(new Stats());			addEventListener(Event.ENTER_FRAME, onStart);		}				private function onStart(e:Event):void		{			_bmp.unlock();						var ct:ColorTransform = new ColorTransform(0.9, 0.9, 0.9);			_bmp.colorTransform(_bmp.rect, ct);						var distX:Number = (stage.mouseX - _particle.x) * 0.06;			var distY:Number = (stage.mouseY - _particle.y) * 0.06;			_particle.vx = distX;			_particle.vy = distY;			_particle.x += _particle.vx;			_particle.y += _particle.vy;			_particle.ax *= 0.08;			_particle.ay *= 0.08;			if (stage.mouseX >= stage.stageWidth / 2)			{				_radian += (Math.PI / 180) * 62.1;			} else _radian -= (Math.PI / 180) * 62.1;						var rad:Number = _radian;			var newP:Particle;						for (var i:Number = 0; i< BULLET_COUNT; i++)			{				var cosX:Number = Math.cos(rad) * 10;				var sinY:Number = Math.sin(rad) * 10;				if (_particlesPool.length != 0)				{					newP = _particlesPool.pop();				} else {					newP = new Particle();				}				newP.vx = cosX;				newP.vy = sinY;				newP.x = _particle.x;				newP.y = _particle.y;				rad += Math.PI * 2 / BULLET_COUNT;				newP.ci = _colorIndex % BULLET_COUNT;				_particles.unshift(newP);			}			_colorIndex ++;						var bulletRect:Rectangle = _bulletImg[0].rect;			var bulletPoint:Point = new Point();						var bw:Number = _bulletImg[0].width / 2;			var bh:Number = _bulletImg[0].height / 2;			var minX:Number = bw * 0.5;			var minY:Number = bh * 0.5;			var maxX:Number = WIDTH - minX;			var maxY:Number = HEIGHT - minY;						var poolAngle:Number = (Math.PI / 180) * 50;			var angleX:Number = Math.cos(poolAngle) * 0.03;			var angleY:Number = Math.sin(poolAngle) * 0.03;						for (i = _particles.length - 1; i>= 0; i--)			{				var p:Particle = _particles[i] as Particle;				p.ax = p.vx * angleX - p.vy * angleY;				p.ay = p.vy * angleY + p.vx * angleX;				p.vx += p.ax;				p.vy += p.ay;				p.x += p.vx;				p.y += p.vy;								if (p.x < minX || p.y < minY || p.x > maxX || p.y > maxY)				{					_particlesPool.push(p);					_particles.splice(i,1);					continue;				}								bulletPoint.x = p.x - bw;				bulletPoint.y = p.y - bh;				_bmp.copyPixels(_bulletImg[p.ci], bulletRect, bulletPoint);				_stage.blendMode = BlendMode.LIGHTEN;			}						_bmp.unlock();		}	}}//package {	class Particle	{		public var x:Number = 0;		public var y:Number = 0;		public var vx:Number = 0;		public var vy:Number = 0;		public var ax:Number = 0;		public var ay:Number = 0;		public var ci:uint = 0;				public function Particle()	}//}